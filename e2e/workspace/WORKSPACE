# Override http_archive for local testing
local_repository(
    name = "aspect_rules_format",
    path = "../..",
)

#---SNIP--- Below here is re-used in the workspace snippet published on releases

#########################################
# rules_format setup                    #
# Paste to the bottom of your WORKSPACE #
#########################################
# Fetches the rules_format dependencies.
# If you want to have a different version of some dependency,
# you should fetch it *before* calling this.
# Alternatively, you can skip calling this function, so long as you've
# already fetched all the dependencies.
load("@aspect_rules_format//format:repositories.bzl", "rules_format_dependencies")

rules_format_dependencies()

# If you didn't already register a toolchain providing nodejs, do that:
load("@rules_nodejs//nodejs:repositories.bzl", "DEFAULT_NODE_VERSION", "nodejs_register_toolchains")

nodejs_register_toolchains(
    name = "node",
    node_version = DEFAULT_NODE_VERSION,
)

load("@rules_python//python:repositories.bzl", "py_repositories")

py_repositories()

load("@aspect_rules_format//format:dependencies.bzl", "parse_dependencies")

parse_dependencies()

# Installs toolchains for running programs under Node, Python, etc.
# Be sure to register your own toolchains before this.
# Most users should do this LAST in their WORKSPACE to avoid getting our versions of
# things like the Go toolchain rather than the one you intended.
load("@aspect_rules_format//format:toolchains.bzl", "format_register_toolchains")

format_register_toolchains()

# If Python formatting is enabled, you'll need to uncomment the following as well.
#
# load("@rules_python//python:pip.bzl", "pip_parse")
# load("@python3//:defs.bzl", "interpreter")
#
# pip_parse(
#     name = "pip",
#     incompatible_generate_aliases = True,
#     python_interpreter_target = interpreter,
#     requirements_lock = "//:requirements_lock.txt",
# )
#
# load("@pip//:requirements.bzl", "install_deps")
#
# install_deps()
